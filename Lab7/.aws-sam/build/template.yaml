AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'Serverless SaaS - Cost by tenant

  '
Globals:
  Function:
    Timeout: 29
Resources:
  CURBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
        - ServerSideEncryptionByDefault:
            SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
  AWSCURDatabase:
    Type: AWS::Glue::Database
    Properties:
      DatabaseInput:
        Name:
          Fn::Sub: costexplorerdb
      CatalogId:
        Ref: AWS::AccountId
  AWSCURCrawlerComponentFunction:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - glue.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
      - Fn::Sub: arn:${AWS::Partition}:iam::aws:policy/service-role/AWSGlueServiceRole
      Policies:
      - PolicyName: AWSCURCrawlerComponentFunction
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource:
              Fn::Sub: arn:${AWS::Partition}:logs:*:*:*
          - Effect: Allow
            Action:
            - glue:UpdateDatabase
            - glue:UpdatePartition
            - glue:CreateTable
            - glue:UpdateTable
            - glue:ImportCatalogToGlue
            Resource: '*'
          - Effect: Allow
            Action:
            - s3:GetObject
            - s3:PutObject
            Resource:
              Fn::Sub: ${CURBucket.Arn}*
      - PolicyName: AWSCURKMSDecryption
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - kms:Decrypt
            Resource: '*'
  AWSCURCrawlerLambdaExecutor:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: AWSCURCrawlerLambdaExecutor
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource:
              Fn::Sub: arn:${AWS::Partition}:logs:*:*:*
          - Effect: Allow
            Action:
            - glue:StartCrawler
            Resource: '*'
  AWSCURCrawler:
    Type: AWS::Glue::Crawler
    DependsOn:
    - AWSCURDatabase
    - AWSCURCrawlerComponentFunction
    Properties:
      Name: AWSCURCrawler-Multi-tenant
      Description: A recurring crawler that keeps your CUR table in Athena up-to-date.
      Role:
        Fn::GetAtt:
        - AWSCURCrawlerComponentFunction
        - Arn
      DatabaseName:
        Ref: AWSCURDatabase
      Targets:
        S3Targets:
        - Path:
            Fn::Sub: s3://${CURBucket}/curoutput
          Exclusions:
          - '**.json'
          - '**.yml'
          - '**.sql'
          - '**.csv'
          - '**.gz'
          - '**.zip'
      SchemaChangePolicy:
        UpdateBehavior: UPDATE_IN_DATABASE
        DeleteBehavior: DELETE_FROM_DATABASE
  AWSCURInitializer:
    Type: AWS::Lambda::Function
    DependsOn: AWSCURCrawler
    Properties:
      Code:
        ZipFile: "const AWS = require('aws-sdk'); const response = require('./cfn-response');\
          \ exports.handler = function(event, context, callback) {\n  if (event.RequestType\
          \ === 'Delete') {\n    response.send(event, context, response.SUCCESS);\n\
          \  } else {\n    const glue = new AWS.Glue();\n    glue.startCrawler({ Name:\
          \ 'AWSCURCrawler-Multi-tenant' }, function(err, data) {\n      if (err)\
          \ {\n        const responseData = JSON.parse(this.httpResponse.body);\n\
          \        if (responseData['__type'] == 'CrawlerRunningException') {\n  \
          \        callback(null, responseData.Message);\n        } else {\n     \
          \     const responseString = JSON.stringify(responseData);\n          if\
          \ (event.ResponseURL) {\n            response.send(event, context, response.FAILED,{\
          \ msg: responseString });\n          } else {\n            callback(responseString);\n\
          \          }\n        }\n      }\n      else {\n        if (event.ResponseURL)\
          \ {\n          response.send(event, context, response.SUCCESS);\n      \
          \  } else {\n          callback(null, response.SUCCESS);\n        }\n  \
          \    }\n    });\n  }\n};\n"
      Handler: index.handler
      Timeout: 30
      Runtime: nodejs16.x
      ReservedConcurrentExecutions: 1
      Role:
        Fn::GetAtt:
        - AWSCURCrawlerLambdaExecutor
        - Arn
  TenantCostandUsageAttributionTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: Date
        AttributeType: N
      - AttributeName: ServiceName
        AttributeType: S
      KeySchema:
      - AttributeName: Date
        KeyType: HASH
      - AttributeName: ServiceName
        KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
      TableName: TenantCostAndUsageAttribution
  QueryLogInsightsExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: product-function-execution-role-lab1
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
      - PolicyName: query-log-insight-lab7
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - logs:GetQueryResults
            - logs:StartQuery
            - logs:StopQuery
            - logs:FilterLogEvents
            - logs:DescribeLogGroups
            - cloudformation:ListStackResources
            Resource:
            - '*'
          - Effect: Allow
            Action:
            - s3:*
            Resource:
            - Fn::Sub: arn:aws:s3:::${CURBucket}*
          - Effect: Allow
            Action:
            - dynamodb:*
            Resource:
            - Fn::GetAtt:
              - TenantCostandUsageAttributionTable
              - Arn
          - Effect: Allow
            Action:
            - Athena:*
            Resource:
            - '*'
          - Effect: Allow
            Action:
            - glue:*
            Resource:
            - '*'
  GetDynamoDBUsageAndCostByTenant:
    Type: AWS::Serverless::Function
    DependsOn: QueryLogInsightsExecutionRole
    Properties:
      CodeUri: GetDynamoDBUsageAndCostByTenant
      Handler: tenant_usage_and_cost.calculate_daily_dynamodb_attribution_by_tenant
      Runtime: python3.9
      Role:
        Fn::GetAtt:
        - QueryLogInsightsExecutionRole
        - Arn
      Environment:
        Variables:
          ATHENA_S3_OUTPUT:
            Ref: CURBucket
      Events:
        ScheduledEvent:
          Type: Schedule
          Properties:
            Name: CalculateDynamoUsageAndCostByTenant
            Schedule: rate(5 minutes)
  GetLambdaUsageAndCostByTenant:
    Type: AWS::Serverless::Function
    DependsOn: QueryLogInsightsExecutionRole
    Properties:
      CodeUri: GetLambdaUsageAndCostByTenant
      Handler: tenant_usage_and_cost.calculate_daily_lambda_attribution_by_tenant
      Runtime: python3.9
      Role:
        Fn::GetAtt:
        - QueryLogInsightsExecutionRole
        - Arn
      Environment:
        Variables:
          ATHENA_S3_OUTPUT:
            Ref: CURBucket
      Events:
        ScheduledEvent:
          Type: Schedule
          Properties:
            Name: CalculateLambdaUsageAndCostByTenant
            Schedule: rate(5 minutes)
Outputs:
  CURBucketname:
    Description: The name of S3 bucket name
    Value:
      Ref: CURBucket
    Export:
      Name: CURBucketname
  AWSCURInitializerFunctionName:
    Description: Function name of CUR initializer
    Value:
      Ref: AWSCURInitializer
    Export:
      Name: AWSCURInitializerFunctionName
